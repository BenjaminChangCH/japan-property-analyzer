# Cursor Rules for 日本不動產投資分析工具 (Japan Property Investment Analyzer)

## 專案概述
這是一個專業的日本不動產投資財務分析 Web 應用程式，幫助投資者分析不同投資策略的財務回報。
- 技術棧：Flask (Python) + HTML/CSS/JavaScript
- 部署平台：Google Cloud Platform (Cloud Run)
- 目標：未來擴展為 iOS/Android 應用程式

## 開發者背景
開發者是程式開發新手，需要詳細的指導和解釋。請始終：
- 使用繁體中文回應
- 提供詳細的步驟說明
- 解釋每個決策的原因
- 提供最佳實踐建議
- 在進行重大更改前先解釋影響

## 程式碼風格與規範

### Python (Flask 後端)
- 使用 Python 3.11+
- 遵循 PEP 8 編碼規範
- 函數名稱使用 snake_case
- 類別名稱使用 PascalCase
- 常數使用 UPPER_CASE
- 每個函數都要有詳細的中文註釋
- 複雜邏輯要拆分成小函數，提高可讀性
- 使用 type hints 提高程式碼品質

### 前端 (HTML/CSS/JavaScript)
- HTML 使用語義化標籤
- CSS 使用 BEM 命名規範或類似的結構化方法
- JavaScript 使用現代 ES6+ 語法
- 優先考慮響應式設計
- 確保無障礙性 (accessibility)
- 為未來移動端開發做準備

### 🎨 設計系統規範 (重要)
**所有 UI/UX 開發必須遵循 `docs/DESIGN_SYSTEM.md` 中的設計系統規範**

#### 強制性規則
1. **✅ 優先使用現有規範** - 開發新功能時必須先查閱設計系統文檔
2. **⚠️ 禁止硬編碼樣式** - 必須使用 CSS 變數，禁止直接寫入數值
3. **📝 記錄所有變更** - 修改設計系統時必須更新文檔並說明原因

#### 必須使用的 CSS 變數
- **文字大小**: `var(--font-size-h1)` ~ `var(--font-size-caption)`
- **字重**: `var(--font-weight-h1)` ~ `var(--font-weight-caption)`
- **間距**: `var(--spacing-xs)` ~ `var(--spacing-xxl)`
- **圓角**: `var(--radius-sm)` ~ `var(--radius-xl)`
- **陰影**: `var(--shadow-sm)` ~ `var(--shadow-lg)`
- **顏色**: `var(--primary-color)`, `var(--secondary-color)` 等

#### 開發流程
1. **需求分析** - 確認功能和視覺需求
2. **規範查閱** - 檢查 `docs/DESIGN_SYSTEM.md` 中的現有組件
3. **組件選擇** - 優先使用現有組件和樣式
4. **謹慎擴展** - 只有在必要時才創建新組件
5. **文檔更新** - 新組件必須更新設計系統文檔

#### 禁止行為
- ❌ 硬編碼字體大小 (如 `font-size: 16px`)
- ❌ 硬編碼間距 (如 `margin: 20px`)
- ❌ 硬編碼顏色 (如 `color: #333`)
- ❌ 不一致的圓角和陰影
- ❌ 跳過設計系統直接創建樣式

### 檔案結構規範
```
/
├── main.py                 # 主應用程式
├── config/                 # 配置模組
├── templates/              # HTML 模板
├── static/                 # 靜態資源
│   ├── css/
│   ├── js/
│   └── images/
├── tests/                  # 測試檔案
├── docs/                   # 文件
├── deployment/             # 部署相關
└── scripts/                # 工具腳本
```

## 開發指導原則

### 1. 程式碼品質
- 每次修改都要考慮可維護性
- 避免重複程式碼 (DRY 原則)
- 單一職責原則：每個函數只做一件事
- 適當的錯誤處理和日誌記錄
- 重要的業務邏輯要有單元測試

### 2. 安全性
- 輸入驗證：所有用戶輸入都要驗證
- 使用環境變數管理敏感資訊
- 實施適當的 CORS 政策
- 添加速率限制防止濫用
- 定期更新依賴套件

### 3. 效能優化
- 資料庫查詢優化
- 靜態資源壓縮和快取
- 適當的錯誤快取策略
- 監控應用程式效能指標

### 4. 移動端準備
- 響應式設計優先
- 觸控友好的 UI 元素
- 考慮離線功能需求
- 優化載入速度和資料使用

## 特定功能指導

### 財務計算邏輯
- 所有財務計算都要有詳細註釋說明公式
- 使用常數定義重要的財務參數
- 計算結果要有合理性檢查
- 提供計算過程的透明度

### 用戶體驗
- 表單驗證要即時且友善
- 載入狀態要有明確指示
- 錯誤訊息要具體且可操作
- 提供專家提示和說明

### 資料處理
- 輸入資料要有格式驗證
- 計算結果要有精度控制
- 支援匯出功能 (PDF/Excel)
- 考慮資料持久化需求

## 部署與維護

### 版本控制
- 使用語義化版本號 (MAJOR.MINOR.PATCH)
- 每次重大功能完成都要更新版本號
- 每次發布都要更新 CHANGELOG.md
- 重要功能要建立 feature branch
- 生產環境部署前要經過測試
- 所有變更都要有清楚的 commit 訊息

#### Commit 訊息規範
- `feat:` 新功能
- `fix:` 錯誤修復
- `docs:` 文檔更新
- `style:` 程式碼格式調整
- `refactor:` 程式碼重構
- `test:` 測試相關
- `chore:` 建置工具或輔助工具的變動

#### 版本發布流程
1. 更新 CHANGELOG.md 記錄變更
2. 更新版本號（如需要）
3. 創建 Git tag
4. 推送到遠端倉庫
5. 觸發自動部署

#### 分支管理策略
- `main` - 生產環境分支，只接受經過測試的代碼
- `feature/*` - 功能開發分支
- `hotfix/*` - 緊急修復分支
- `release/*` - 版本發布準備分支

### 監控與日誌
- 關鍵操作要有日誌記錄
- 設定適當的監控指標
- 錯誤要有詳細的堆疊追蹤
- 定期檢查應用程式健康狀態

### 文件維護
- API 變更要更新文件
- 重要決策要記錄在 docs/ 目錄
- 使用者手冊要保持最新
- 開發者文件要包含設定步驟

## AI 協助指導

### 程式碼審查
- 每次重大修改都要求程式碼審查
- 關注安全性、效能和可維護性
- 檢查是否符合專案規範
- 建議改進方案

### 問題解決
- 遇到問題時先描述預期行為
- 提供完整的錯誤訊息和上下文
- 說明已經嘗試的解決方案
- 詢問最佳實踐建議

### 功能開發
- 新功能開發前先討論設計方案
- 考慮對現有功能的影響
- 評估技術可行性和維護成本
- 制定測試策略

## 學習與成長

### 技能發展重點
1. **後端開發**：Flask 框架、Python 最佳實踐、API 設計
2. **前端開發**：現代 JavaScript、CSS 框架、響應式設計
3. **雲端部署**：GCP 服務、CI/CD 流程、容器化
4. **移動端開發**：React Native 或 Flutter 基礎
5. **資料庫**：SQL 基礎、資料建模、效能優化

### 推薦學習資源
- Flask 官方文件和最佳實踐
- Google Cloud Platform 文件
- MDN Web 開發指南
- 移動端開發框架比較

## 注意事項
- 所有修改都要考慮向後相容性
- 重要功能變更要通知使用者
- 定期備份重要資料和配置
- 保持依賴套件的安全更新
- 遵循 GDPR 和相關隱私法規

## PRD 互動與進度管理規範

### 功能完成度評估
每當完成一個功能或模組時，必須：
1. **評估完成度**：對照 `docs/PRD.md` 中的需求規格，評估實際完成度百分比
2. **更新 PRD 進度**：在 PRD 文件中更新對應功能的狀態和完成度
3. **記錄變更**：在 `docs/CHANGELOG.md` 中記錄功能完成情況
4. **測試驗證**：確保功能符合 PRD 中定義的驗收標準
5. **文件同步**：更新相關技術文件和使用者文件

### PRD 狀態標記規範
在 PRD 中使用以下狀態標記：
- `🔴 未開始 (0%)`：功能尚未開始開發
- `🟡 進行中 (X%)`：功能正在開發中，X 為完成百分比
- `🟢 已完成 (100%)`：功能已完成並通過測試
- `🔵 已部署`：功能已部署到生產環境
- `⚠️ 需修復`：功能存在問題需要修復
- `📋 待測試`：功能開發完成，等待測試

### 進度追蹤流程
1. **每日檢查**：檢查當前開發進度是否與 PRD 計劃一致
2. **週報更新**：每週更新 PRD 中的整體進度和里程碑狀態
3. **問題記錄**：遇到技術難題或需求變更時，在 PRD 中記錄並調整計劃
4. **風險評估**：定期評估開發風險，更新 PRD 中的風險管控措施

## 簡化調用格式 (Slash Commands)

### 開發相關指令
- `/fix` - 修復程式碼錯誤或 bug
- `/refactor` - 重構程式碼，提高可讀性和效能
- `/test` - 建立或執行測試案例
- `/deploy-stg` - 部署到 STG 測試環境 (推送到 feature branch)
- `/deploy-prd` - 部署到 PRD 生產環境 (合併到 main branch)
- `/optimize` - 效能優化和程式碼改進
- `/security` - 安全性檢查和漏洞修復
- `/lint` - 程式碼風格檢查和修正

### 功能開發指令
- `/init [功能名稱]` - 一鍵初始化新功能開發環境
- `/feature [功能名稱]` - 開發新功能
- `/api [API名稱]` - 建立或修改 API 端點
- `/ui [頁面名稱]` - 建立或修改使用者介面
- `/db [操作類型]` - 資料庫相關操作 (create/migrate/seed)
- `/auth` - 用戶認證系統相關功能
- `/ai` - AI 對話助手相關功能

### 設計系統指令
- `/design-check` - 檢查當前頁面是否符合設計系統規範
- `/design-update` - 更新設計系統規範文檔
- `/component [組件名稱]` - 創建符合設計系統的新組件
- `/style-audit` - 審查 CSS 是否使用了硬編碼值
- `/responsive-test` - 測試響應式設計在不同裝置上的效果

### 文件管理指令
- `/prd` - 更新或檢查 PRD 進度
- `/docs [文件類型]` - 建立或更新文件
- `/changelog` - 更新版本變更記錄
- `/readme` - 更新 README 文件
- `/analysis` - 程式碼分析和技術債務檢查

### 專案管理指令
- `/complete` - 開發完成檢查，確保環境一致性和準備下次開發
- `/status` - 檢查專案整體狀態和進度
- `/milestone` - 檢查或更新開發里程碑
- `/review` - 程式碼審查和品質檢查
- `/backup` - 備份重要檔案和配置
- `/clean` - 清理暫存檔案和無用程式碼

### 學習支援指令
- `/explain [概念]` - 解釋技術概念或程式碼邏輯
- `/best-practice [主題]` - 提供最佳實踐建議
- `/tutorial [技術]` - 提供學習教程和範例
- `/troubleshoot` - 問題診斷和解決方案

### 使用範例
```
使用者：/init Google OAuth 登入功能
AI：我來為您初始化 Google OAuth 登入功能的開發環境...
1. 檢查 PRD 狀態和需求
2. 創建 feature branch
3. 準備目錄結構和模板
4. 更新 PRD 狀態為進行中

使用者：/fix 計算函數的精度問題
AI：我來幫您修復計算函數的精度問題...

使用者：/prd 更新用戶認證模組進度為60%
AI：我來更新 PRD 中用戶認證模組的進度...

使用者：/feature 案件收藏功能
AI：我來幫您開發案件收藏功能...
```

### 指令組合使用
可以組合多個指令：
- `/init 案件管理系統 /feature /test /docs` - 初始化並開發案件管理系統
- `/feature 通知系統 /test /docs api /deploy-stg` - 開發通知系統並部署到 STG 測試
- `/fix /test /prd /deploy-stg` - 修復問題後測試並部署到 STG 環境
- `/refactor /optimize /review /test` - 重構、優化、審查並測試程式碼

### 新功能開發標準流程
**重要**：每次開發新功能都應該先執行初始化流程
1. **初始化階段** (`/init [功能名稱]`)：
   - 📊 檢查 PRD 狀態和需求定義
   - 🌿 創建 feature branch (feature/功能名稱)
   - 📁 準備目錄結構和檔案模板
   - 🗄️ 設計資料庫結構 (如需要)
   - 📝 定義 API 規格
   - 🧪 創建測試檔案模板
   - 📚 準備技術文件模板
   - 🔄 更新 PRD 狀態為進行中

2. **開發階段** (`/feature [功能名稱]`)：
   - 實現核心功能邏輯
   - 建立 API 端點
   - 開發前端界面
   - 整合現有系統

3. **測試階段** (`/test`)：
   - 單元測試
   - 整合測試
   - 功能測試

4. **部署階段** (`/deploy-stg`)：
   - 推送到 feature branch
   - 自動部署到 STG 環境
   - STG 環境測試

5. **完成階段** (`/prd`)：
   - 更新 PRD 完成狀態
   - 準備 PR 到 main branch

### CI/CD 部署流程規範
**重要**：本專案採用 STG → PRD 兩階段部署流程，包含手動審核機制

#### 完整流程 (詳見 `docs/CI_CD_WORKFLOW.md`)
1. **STG 部署** (自動)：
   - 推送到 feature/develop/hotfix branch
   - 自動觸發 STG 環境部署
   - STG 網址：https://japan-property-analyzer-864942598341.asia-northeast1.run.app

2. **STG 測試** (手動)：
   - 開發者在 STG 環境進行功能測試
   - 確認所有功能正常運作
   - 測試 Google OAuth 登入功能
   - 驗證響應式設計和效能

3. **創建 Pull Request** (手動)：
   - 測試通過後，手動創建 PR 到 main 分支
   - 使用標準 PR 模板描述變更
   - 包含 STG 測試結果和截圖

4. **代碼審查** (手動)：
   - 至少一位審查者進行代碼審查
   - 審查者需在 STG 環境驗證功能
   - 確認符合程式碼品質標準

5. **PRD 部署** (自動)：
   - PR 合併到 main 分支後自動觸發
   - 部署到 PRD 環境
   - PRD 網址：https://japan-property-analyzer-prod-864942598341.asia-northeast1.run.app

#### 安全規則
- 🚫 **禁止直接推送到 main 分支**：main 分支受保護
- ✅ **強制 STG 測試**：不可跳過 STG 環境測試
- 👥 **必要代碼審查**：所有 PR 需要審查者批准
- 🧪 **自動化檢查**：CI/CD 流程和測試必須通過

#### 緊急修復流程
- 使用 `hotfix/**` 分支進行緊急修復
- 快速 STG 測試後創建緊急 PR
- 必要時可進行生產環境回滾

---
記住：程式開發是一個持續學習的過程，不要害怕犯錯，每個錯誤都是學習的機會！